//操作減らすために触れたら拾うのままでいいかも
//1人称視点にするつもりだったけど選ぶ感じでいいかも
//COMかどうかはんべつ　
//ポリラインどうする
//人数により画面分割
//パワーゲージ（色によるもの、超将棋みたいな）
//投げる位置　手からだと一人称のときやりづらい　真ん中？


//モデルDrawを規定クラス
//GameOfject3Dを継承
//継承先でいらなくてもオーバーライド書く
//bool　Is
//コピー渡し・参照渡し
//A a			A* a
//↑でかい		↑int型
//ポインタ(*)
//	アクセス記号->
//	演算できる　p++;
//	〇実態がないかも(nullptrあり)　確認必要　nullptrのとき
//	〇渡す側　書き換えられるかも　書き換えたいとき
//参照(&)
//	アクセス記号.
//	演算できない
//	実態が必ずある(nullptrない)
//	渡す側からは参照かコピーかわからない
//	↓特別な理由がなければconst参照を使う！（見るだけの時）基本これ
// 
// 
//変数定数
//部品化？？
//COOLTEXT ロゴ


//-------------------------
//AI
//タイトル
//リザルト
//キャラ

//-------------------------
//２画面
//時間

//-------------------------
//エフェクト
//ゴール吸い込み

//あってるか不安なとこ☆
//ポリゴン減らす
//pTextはデバッグのみ




//AI
//背景
// CSV.JSON
// クレジット
// マジックナンバー
// 関数化
// コントローラー接続？
// 当たり判定
// リザルトで一時停止表示しない
//
// 
// //直した↓
// ポリライン　投げるとき消える 直った
// エフェクトのメモリ 直った
// よーいスタート
// 玉後ろに
// 開始前準備アシスト聞く
// 音がならないものがある
// よーいスタート文字表示
// ボールの位置
// シーン切り替え
// リザルトボタン
// ルール画像




//
////json
// // JSONデータを読み込むためのファイルストリームを作成
//std::ifstream file("test.json", std::ios::in | std::ios::binary);
//
//// ファイルが正常にオープンされたかを確認
//if (!file.is_open()) {
//    std::cerr << "Failed to open JSON file." << std::endl;
//    return;
//}
//
//// JSONデータを格納するための変数
//nlohmann::json data;
//
//// JSONファイルをパースしてデータを取得
//file >> data;
//
//
//// ファイルをクローズ
//file.close();
//
//nlohmann::json innerObject = data["playerPos"];
//
//innerObject[0];
////playerPosRed = innerObject[0];
//
////XMFLOAT2 a = data["playerPos"];
//
////std::ifstream file("test.json");
////jsonData data;
////file >> data;
//
////std::string name = data["name"];
////int age = data["age"];